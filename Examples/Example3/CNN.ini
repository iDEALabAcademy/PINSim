[HardwareConfig]
#Pixel array dimention
pixel_array_width = 32
pixel_array_height = 32
#ADCs for each channel 
adc_number = 32

#percentage of normal, sensig and computing ( total should be 100)
operations_percentage = 20,50,30

#box size
box_size = 3

# technology_size eg 32, 45, etc (nm)
technology_size = 45

pixel_model = 0
pixel_array_model = 0
main_system_model = 0
decoder_model = 0
adc_model = 0
adc_array_model = 0
adc_cp_model = 0
pixel_cp_model = 0
#location of CP (1 means there is a cp)
cp_in_pixel = 0
cp_in_adc = 1
#usually equal to parallelism level (in adc this number is equal to 1)
cp_per_pixel = 1
cp_per_adc = 1
#parallelism level
parallelism_level = 1
#memory configuration
buffer_model = 0
global_model = 0
#weight precision (bit)
weight_precision = 8



[NetworkConfig]
#network type can be CNN or MLP
type = CNN
#type = MLP

#filter size
#TODO add channel to code
#kernel_chennel = 3
kernel_number = 64
kernel_width = 3
kernel_height = 3
stride = 1
padding = 0
#hedden node in the first layer
hidden_node = 512



#Components:

[Pixel]
power = 0.0177e-9, 0.05478e-9, 0.05765e-9
delay = 2e-6, 31e-6, 2.5e-6
area = 0.00000391, 0.0000184, 0.00000998
# powers are in nW
#Latencies are in us
#Area in mm^2
#Pixel 1 ref: An Energy/Illumination-Adaptive CMOS Image Sensor With Reconfigurable Modes of Operations --- (4T) numbers in 180nm : 15.4, 8, 31.36, pow array: 150 
#Pixel 2 ref: A 65 nm 0.5 V DPS CMOS Image Sensor With 17 pJ/Frame.Pixel and 42 dB Dynamic Range for Ultra-Low-Power SoCs ---- (5T) 65 nm
#Pixel 3 ref: A 467nW CMOS Visual Motion Sensor with Temporal Averaging and Pixel Aggregation  ---- (3T) numbers in 130nm: 340, 4, 40.96 pow array: 268 


[PixelArray]

power = 0, 0, 0
delay = 0e-6, 0e-6, 0e-6
#Is it additional area? yes it was and I applied it to pixel area. 
area = 0, 0, 0
# same units and references as pixel part are used


[Adc]
power = 146e-9, 133e-9, 116e-9, 234e-9, 200000e-9, 156e-9
delay = 0.5e-6, 0.5e-6, 0.5e-6, 0.5e-6, 0.00083e-6, 6.3e-6
area = 0.169, 0.148, 0.127, 0.106, 0.010, 0.0161
#config: 8b,7b,6b,5b,4b,3b
# powers in nW, delay in us, area in mm^2
#refs: A resolution-reconfigurable 5-to-10b 0.4-to-1V power scalable SAR ADC, A Miniature 2 mW 4 bit 1.2 GS/s Delay-Line-Based ADC in 65 nm CMOS, Adaptive Resolution ADC Array for Neural Implant
# main data for 130 nm ADC,

[MainSystem]
power = 0, 0, 0, 0
delay = 0, 0, 0, 0
area = 0, 0, 0, 0

[AdcArray]
power = 0, 0, 0, 0, 0, 0
delay = 0, 0, 0, 0, 0, 0
area = 0, 0, 0, 0, 0, 0

[AdcComputeAddon]
power = 0, 0, 0, 0, 0, 0
delay = 0, 0, 0, 0, 0, 0
area = 0, 0, 0, 0, 0, 0

[PixelComputeAddon]
power = 3.55e-9, 3.88e-9, 0, 0
delay = 0.0000025e-6, 0.0000025e-6, 0, 0
area = 0.00000585, 0.0000234, 0, 0
# result from spice simulation of Tizbin and PISA
#sram, etc all per bit
[BufferCell]
read_power = 2200e-9, 32e-9, 12e-9, 1.5e-9
write_power = 2200e-9, 15e-9, 657e-9, 2.14e-9
read_delay = 0.05e-6, 0.0015e-6, 0.00238e-6, 0.00996e-6
write_delay = 0.05e-6, 0.002e-6, 0.0014e-6, 0.00996e-6
#shift = 11, 12, 32, 11
#power means static_power
power =0.304e-9, 2e-9, 0, 0
# additional delay (optional)
delay = 0, 0, 0, 0, 0, 0
area = 0.00000904, 0.0000001265, 0.000000025, 0.00000072
#powers in nW, delay in us, area in mm^2
# 1st is sram, Ref:   Energy Efficient Single-Ended 6-T SRAM for Multimedia Applications---- 65nm
# 2nd is dram, Ref:  A 500 MHz Random Cycle, 1.5 ns Latency, SOI Embedded DRAM Macro Featuring a Three-Transistor Micro Sense Amplifier ---65nm
# 3rd is RRAM, Ref:  A 5ns Fast Write Multi-Level Non-Volatile 1 K bits RRAM Memory with Advance Write Scheme ---180nm 3.85, 18.5, 0.3
# 4rd is MRAM, Ref:  A 90nm 12ns 32Mb 2T1MTJ MRAM ---90nm *** Design and Optimization of Nonvolatile Multibit 1T1R Resistive RAM 90nm: 11, 12, 1.37

#mtj, etc all per bit
[GlobalCell]
read_power = 2200e-9, 32e-9, 12e-9, 1.5e-9
write_power = 2200e-9, 15e-9, 657e-9, 2.14e-9
read_delay = 0.05e-6, 0.0015e-6, 0.00238e-6, 0.00996e-6
write_delay = 0.05e-6, 0.002e-6, 0.0014e-6, 0.00996e-6
#shift = 11, 12, 32, 11
#power means static_power
power =0.304e-9, 2e-9, 0, 0
# additional delay (optional)
delay = 0, 0, 0, 0, 0, 0
area = 0.00000904, 0.0000001265, 0.000000025, 0.00000072
# same numbers as buffer cell

[Buffer]
#best value is kernel_size x weight precision
bus_size = 72
power = 0
delay = 0
area = 0

[Global]
#should be bigger than weight precision
bus_size = 72
power = 0
delay = 0
area = 0


#Decoder size should be equal to (N x M)(pixel_array_height / kernel_height) for example for pixel size equal to 32 and kernel size of 3,  m = 11, so 4 x 16 decoder is needed
[Decoder]
#please check the units
power = 158.48e-9, 0.966e-9, 7200e-9
delay = 0.00003092e-6, 0.000281e-6, 0.000101e-6
area = 0.00009263, 0.00009263, 0.000134

[ControlUnit]
power = 0, 0, 0, 0
delay = 0, 0, 0, 0
area = 0, 0, 0, 0
